/*
    Stream es una lista de strings, los mas importantes de uso es el filter y el map
    filter - puede filtrar datos y hace la funcion de un IF
    map - sirve para transformar una lista

    Imprimir los error N del fieldErrors con el recorrido del array LISTO
    obtener el campo field y el campo defaultMessage  LISTO
    usar streams LISTO


    PENDIENTE POR HACER
	-detectar la URL vacia o incompleta LISTO (No lo pude hacer con el IF, cree otra excepcion con el NoResourceFoundException)
    -field (falta sacar el campo) LISTO, pero revisar si es correcto colocar "El campo (" en la ex y en el request "No puede ir vacio")
    -agregar alumnoEntity y maestroEntity como entity
		*crear las clases dentro de Request LISTO
		*modificar el controller (solo post) LISTO
		*modificar el service LISTO
		
    -Agregar log con el @Slf4j (No pude implementarloporque no reconoce la notacion) ahora si ya terminar
    -Cambiar los SystemoutPrintl por log (No pude implementarloporque no reconoce la notacion)
	
    -Variables constantes para los textos LISTO
	()

     (Dar de alta varios maestroEntity y materiaEntities, con algun programa 200,000) pagina: https://www.mockaroo.com/
     agregarle al maestroEntity   200,000 datos
     agregarle a la materiaEntity 200,000 datos
     agregarle a la tabla relacional 200,000 datos
	 
	 se realizo con phyton
	 paso para realizarlo
	 verificar phyton | python --version
	 Instalar las dependencias necesarias | pip install psycopg2 faker
	 entrar a la carpeta donde tienes tu .py (cd carpeta_nombre y cd ..) (o ir a la ruta directa cd C:\Users\Francisco\Documents)
   	 python script_name.py

	 

     IMPLEMENTAR INTERFACES, MAPPERS, CONSUMIR UN SP DIRECTO
    ----
"mensaje": "(nombre)=El campo debe contener solo letras, (nombre)=El campo debe tener minimo 1 y maximo 10 datos numéricos, (descripcion)=El campo no puede ir vacio"
    cambiar el if de la lista vacia del controller al service LISTO
    */
//"mensaje": "El campo nombre debe tener solo letras, el campo descripcion no puede ser nulo" LISTO



agregar @Data (ya funciona) LISTO

    -Variables constantes para los textos LISTO
	(Poner los las variables constantes en una clase y segmentarlas por error, exito) agregar al paquete constants
	igual el log llevarlo al paquete LISTO
	
	pasar el Response para el Alumno Maestro, tal cual esta Materia LISTO
	
	
	sonar
	como hacer un enum en java
	pruebas unitarias con J unit, mockito
	
	
	
PREGUNTAS
porque lo que tengo en Alumno con el @Column no le afecta y solo toma lo del response

el campo fechaNacimiento y fechaContratacion dejo de servir desde que agregue el response
marca un erro al usar esto
	//@Pattern(regexp = "^\\d{4}-\\d{2}-\\d{2}$", message = "Debe escribirse de la siguiente forma yyyy-MM-dd") // Para validar el formato
	
	pasar el Date a String y validar con if el cambo de si es mayor al dia de hoy
	
y no valida el campo si lo paso por ejemplo 12-12-2020
¿como puedo reparar eso?

porque ahora postman al guardar guada este dato con fecha y hora
    "fechaContratacion": "2021-01-03T00:00:00.000+00:00",
segun yo antes solo era el dia, mes ,año



cambiar de lista de alumnoEntities a una entity
primero una lista List<AlumnoResponse>
se crea la variable de la lista : List<Alumno> listaAlumno = alumnoRepository.findAll();
Se recorre la lista con Stream para sacar los datos de la lista anterioir
Se crea uN alumnoResponse para colocar su dato correspondiente :  AlumnoResponse response = new AlumnoResponse();
traemos el dato response.setNombre(alumnoEntity.getNombre());



Pasar todos a Mapper (asi como el de Alumno)


como se hace el mapper de lista (intentarlo)
quitar de la linea 47 a 55 (obtenerallalumnos)
retornar la lista con el mapper



LocaDate date = LocalDate.parse("yyyy-mm-dd");
parseo en el service